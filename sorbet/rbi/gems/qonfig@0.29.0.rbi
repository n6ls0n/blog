# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `qonfig` gem.
# Please instead update this file by running `bin/tapioca gem qonfig`.


# @api public
# @since 0.1.0
#
# source://qonfig//lib/qonfig.rb#11
module Qonfig
  extend ::Qonfig::Plugins::AccessMixin
  extend ::Qonfig::Validation::PredefinitionMixin
end

# @api private
# @see Qonfig::Plugins::Regsitry
# @since 0.4.0
#
# source://qonfig//lib/qonfig/errors.rb#159
class Qonfig::AlreadyRegisteredPluginError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Settings
# @since 0.2.0
#
# source://qonfig//lib/qonfig/errors.rb#65
class Qonfig::AmbiguousSettingValueError < ::Qonfig::Error; end

# @api public
# @since 0.1.0
#
# source://qonfig//lib/qonfig/errors.rb#10
class Qonfig::ArgumentError < ::ArgumentError; end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/command_set.rb#5
class Qonfig::CommandSet
  include ::Enumerable

  # @api private
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#20
  def initialize; end

  # @api private
  # @param command [Qonfig::Commands::Base]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#30
  def <<(command); end

  # @api private
  # @param command [Qonfig::Commands::Base]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#30
  def add_command(command); end

  # @api private
  # @return [Array<Qonfig::Commands::Base>]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#14
  def commands; end

  # @api private
  # @param command_set [Qonfig::CommandSet]
  # @param concat_condition [Block]
  # @return [void]
  # @since 0.1.0
  # @version 0.19.0
  # @yield [command]
  # @yieldparam command [Qonfig::Commands::Base]
  #
  # source://qonfig//lib/qonfig/command_set.rb#53
  def concat(command_set, &concant_condition); end

  # @api private
  # @return [Qonfig::CommandSet]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#67
  def dup; end

  # @api private
  # @param block [Proc]
  # @return [Enumerable]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#40
  def each(&block); end

  private

  # @api private
  # @param block [Proc]
  # @return [Any]
  # @since 0.2.0
  # @version 0.19.0
  #
  # source://qonfig//lib/qonfig/command_set.rb#81
  def thread_safe(&block); end
end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/commands.rb#5
module Qonfig::Commands; end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/commands/base.rb#5
class Qonfig::Commands::Base
  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/base.rb#41
  def call(data_set, settings); end

  # @api private
  # @return [Boolean]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/commands/base.rb#47
  def inheritable?; end

  class << self
    # @api private
    # @param identifier [Boolean]
    # @return [Boolean]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/commands/base.rb#12
    def inheritable=(identifier); end

    # @api private
    # @return [Boolean]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/commands/base.rb#20
    def inheritable?; end

    # @api private
    # @param child_klass [Class]
    # @return [Boolean]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/commands/base.rb#29
    def inherited(child_klass); end
  end
end

# @api private
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/definition.rb#5
module Qonfig::Commands::Definition; end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/commands/definition/add_nested_option.rb#5
class Qonfig::Commands::Definition::AddNestedOption < ::Qonfig::Commands::Base
  # @api private
  # @param key [Symbol, String]
  # @param nested_definitions [Proc]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [AddNestedOption] a new instance of AddNestedOption
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_nested_option.rb#29
  def initialize(key, nested_definitions); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_nested_option.rb#44
  def call(data_set, settings); end

  # @api private
  # @return [Symbol, String]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_nested_option.rb#13
  def key; end

  # @api private
  # @return [Class<Qonfig::DataSet>]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_nested_option.rb#19
  def nested_data_set_klass; end
end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/commands/definition/add_option.rb#5
class Qonfig::Commands::Definition::AddOption < ::Qonfig::Commands::Base
  # @api private
  # @param key [Symbol, String]
  # @param value [Object]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [AddOption] a new instance of AddOption
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_option.rb#29
  def initialize(key, value); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_option.rb#42
  def call(data_set, settings); end

  # @api private
  # @return [Symbol, String]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_option.rb#13
  def key; end

  # @api private
  # @return [Object]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/add_option.rb#19
  def value; end
end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/commands/definition/compose.rb#5
class Qonfig::Commands::Definition::Compose < ::Qonfig::Commands::Base
  # @api private
  # @param composable_data_set_klass [Qonfig::DataSet]
  # @raise [Qonfig::ArgumentError]
  # @return [Compose] a new instance of Compose
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/compose.rb#21
  def initialize(composable_data_set_klass); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/compose.rb#38
  def call(data_set, settings); end

  # @api private
  # @return [Qonfig::DataSet]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/commands/definition/compose.rb#13
  def composable_data_set_klass; end
end

# @api private
# @since 0.14.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_json.rb#6
class Qonfig::Commands::Definition::ExposeJSON < ::Qonfig::Commands::Base
  # @api private
  # @option via
  # @option env
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param via [Hash] a customizable set of options
  # @param env [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @raise [Qonfig::ArgumentError]
  # @return [ExposeJSON] a new instance of ExposeJSON
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#61
  def initialize(file_path, via:, env:, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#82
  def call(data_set, settings); end

  # @api private
  # @return [Symbol, String]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#44
  def env; end

  # @api private
  # @return [String, Pathname]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#26
  def file_path; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#50
  def replace_on_merge; end

  # @api private
  # @return [Boolean]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#32
  def strict; end

  # @api private
  # @return [Symbol]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#38
  def via; end

  private

  # @api private
  # @param json_data [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#172
  def build_data_set_klass(json_data); end

  # @api private
  # @param settings [Qonfig::Settings]
  # @raise [Qonfig::ExposeError]
  # @raise [Qonfig::IncompatibleJSONStructureError]
  # @return [void]
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#130
  def expose_env_key!(settings); end

  # @api private
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#100
  def expose_file_name!(settings); end

  # @api private
  # @param file_path [String]
  # @raise [Qonfig::IncompatibleJSONStructureError]
  # @return [Hash]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_json.rb#158
  def load_json_data(file_path); end
end

# @api private
# @return [Hash]
# @since 0.14.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_json.rb#20
Qonfig::Commands::Definition::ExposeJSON::EMPTY_JSON_DATA = T.let(T.unsafe(nil), Hash)

# @api private
# @return [Hash]
# @since 0.14.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_json.rb#14
Qonfig::Commands::Definition::ExposeJSON::EXPOSERS = T.let(T.unsafe(nil), Hash)

# @api private
# @since 0.14.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_self.rb#6
class Qonfig::Commands::Definition::ExposeSelf < ::Qonfig::Commands::Base
  # @api private
  # @option env
  # @option format
  # @option replace_on_merge
  # @param caller_location [String]
  # @param env [Hash] a customizable set of options
  # @param format [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @raise [Qonfig::ArgumentError]
  # @return [ExposeSelf] a new instance of ExposeSelf
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#42
  def initialize(caller_location, env:, format:, replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @raise [Qonfig::ExposeError]
  # @return [void]
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#67
  def call(data_set, settings); end

  # @api private
  # @return [String]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#20
  def caller_location; end

  # @api private
  # @return [Symbol, String]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#26
  def env; end

  # @api private
  # @return [String, Symbol]
  # @since 0.15.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#14
  def format; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#32
  def replace_on_merge; end

  private

  # @api private
  # @param self_placed_settings [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#113
  def build_data_set_klass(self_placed_settings); end

  # @api private
  # @raise [Qonfig::SelfDataNotFound]
  # @raise [Qonfig::IncompatibleEndDataStructureError]
  # @return [Hash]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_self.rb#96
  def load_self_placed_end_data; end
end

# @api private
# @since 0.7.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#6
class Qonfig::Commands::Definition::ExposeYAML < ::Qonfig::Commands::Base
  # @api private
  # @option via
  # @option env
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param via [Hash] a customizable set of options
  # @param env [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @raise [Qonfig::ArgumentError]
  # @return [ExposeYAML] a new instance of ExposeYAML
  # @since 0.7.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#61
  def initialize(file_path, via:, env:, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#82
  def call(data_set, settings); end

  # @api private
  # @return [Symbol, String]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#44
  def env; end

  # @api private
  # @return [String, Pathname]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#26
  def file_path; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#50
  def replace_on_merge; end

  # @api private
  # @return [Boolean]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#32
  def strict; end

  # @api private
  # @return [Symbol]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#38
  def via; end

  private

  # @api private
  # @param yaml_data [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#172
  def build_data_set_klass(yaml_data); end

  # @api private
  # @param settings [Qonfig::Settings]
  # @raise [Qonfig::ExposeError]
  # @raise [Qonfig::IncompatibleYAMLStructureError]
  # @return [void]
  # @since 0.7.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#130
  def expose_env_key!(settings); end

  # @api private
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.7.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#100
  def expose_file_name!(settings); end

  # @api private
  # @param file_path [String]
  # @raise [Qonfig::IncompatibleYAMLStructureError]
  # @return [Hash]
  # @since 0.7.0
  #
  # source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#158
  def load_yaml_data(file_path); end
end

# @api private
# @return [Hash]
# @since 0.7.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#20
Qonfig::Commands::Definition::ExposeYAML::EMPTY_YAML_DATA = T.let(T.unsafe(nil), Hash)

# @api private
# @return [Hash]
# @since 0.7.0
#
# source://qonfig//lib/qonfig/commands/definition/expose_yaml.rb#14
Qonfig::Commands::Definition::ExposeYAML::EXPOSERS = T.let(T.unsafe(nil), Hash)

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#5
class Qonfig::Commands::Definition::LoadFromENV < ::Qonfig::Commands::Base
  # @api private
  # @option convert_values
  # @param convert_values [Hash] a customizable set of options
  # @raise [Qonfig::ArgumentError]
  # @return [LoadFromENV] a new instance of LoadFromENV
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#42
  def initialize(convert_values: T.unsafe(nil), prefix: T.unsafe(nil), trim_prefix: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#69
  def call(data_set, settings); end

  # @api private
  # @return [Boolean]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#15
  def convert_values; end

  # @api private
  # @return [Regexp]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#21
  def prefix_pattern; end

  # @api private
  # @return [Regexp]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#33
  def trim_pattern; end

  # @api private
  # @return [Boolean]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#27
  def trim_prefix; end

  private

  # @api private
  # @param env_data [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#96
  def build_data_set_klass(env_data); end

  # @api private
  # @return [Hash]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_env.rb#81
  def extract_env_data; end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#6
module Qonfig::Commands::Definition::LoadFromENV::ValueConverter
  class << self
    # @api private
    # @param env_data [Hash]
    # @return [void]
    # @since 0.2.0
    #
    # source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#49
    def convert_values!(env_data); end

    private

    # @api private
    # @param value [Object]
    # @return [Object]
    # @since 0.2.0
    #
    # source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#62
    def convert_value(value); end
  end
end

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#35
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::ARRAY_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#29
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::FALSE_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#17
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::FLOAT_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#11
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::INTEGER_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#41
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::QUOTED_STRING_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @return [Regexp]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_env/value_converter.rb#23
Qonfig::Commands::Definition::LoadFromENV::ValueConverter::TRUE_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
# @since 0.5.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#6
class Qonfig::Commands::Definition::LoadFromJSON < ::Qonfig::Commands::Base
  # @api private
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [LoadFromJSON] a new instance of LoadFromJSON
  # @since 0.5.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#35
  def initialize(file_path, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @raise [Qonfig::IncompatibleJSONStructureError]
  # @return [void]
  # @since 0.5.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#48
  def call(data_set, settings); end

  # @api private
  # @return [String, Pathname]
  # @since 0.5.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#14
  def file_path; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#26
  def replace_on_merge; end

  # @api private
  # @return [Boolean]
  # @since 0.5.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#20
  def strict; end

  private

  # @api private
  # @param json_data [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.5.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_json.rb#67
  def build_data_set_klass(json_data); end
end

# @api private
# @since 0.2.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#6
class Qonfig::Commands::Definition::LoadFromSelf < ::Qonfig::Commands::Base
  # @api private
  # @option format
  # @option replace_on_merge
  # @param caller_location [String]
  # @param format [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [LoadFromSelf] a new instance of LoadFromSelf
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#35
  def initialize(caller_location, format:, replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#52
  def call(data_set, settings); end

  # @api private
  # @return [String]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#20
  def caller_location; end

  # @api private
  # @return [String, Symbol]
  # @since 0.15.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#14
  def format; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#26
  def replace_on_merge; end

  private

  # @api private
  # @param self_placed_settings [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#85
  def build_data_set_klass(self_placed_settings); end

  # @api private
  # @raise [Qonfig::SelfDataNotFound]
  # @raise [Qonfig::IncompatibleYAMLStructureError]
  # @return [Hash]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_self.rb#68
  def load_self_placed_end_data; end
end

# @api private
# @since 0.2.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#6
class Qonfig::Commands::Definition::LoadFromYAML < ::Qonfig::Commands::Base
  # @api private
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [LoadFromYAML] a new instance of LoadFromYAML
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#35
  def initialize(file_path, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @raise [Qonfig::IncompatibleYAMLStructureError]
  # @return [void]
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#50
  def call(data_set, settings); end

  # @api private
  # @return [String, Pathname]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#14
  def file_path; end

  # @api private
  # @return [Boolean]
  # @since 0.29.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#26
  def replace_on_merge; end

  # @api private
  # @return [Boolean]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#20
  def strict; end

  private

  # @api private
  # @param yaml_data [Hash]
  # @return [Class<Qonfig::DataSet>]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/commands/definition/load_from_yaml.rb#69
  def build_data_set_klass(yaml_data); end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#5
class Qonfig::Commands::Definition::ReDefineOption < ::Qonfig::Commands::Base
  # @api private
  # @param key [Symbol, String]
  # @param value [Object]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [ReDefineOption] a new instance of ReDefineOption
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#35
  def initialize(key, value, nested_definitions); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#51
  def call(data_set, settings); end

  # @api private
  # @return [Symbol, String]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#13
  def key; end

  # @api private
  # @return [Proc, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#25
  def nested_data_set_klass; end

  # @api private
  # @return [Object]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/commands/definition/re_define_option.rb#19
  def value; end
end

# @api private
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation.rb#5
module Qonfig::Commands::Instantiation; end

# @api private
# @since 0.19.0
#
# source://qonfig//lib/qonfig/commands/instantiation/freeze_state.rb#5
class Qonfig::Commands::Instantiation::FreezeState < ::Qonfig::Commands::Base
  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/freeze_state.rb#15
  def call(data_set, settings); end
end

# @api private
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#5
class Qonfig::Commands::Instantiation::ValuesFile < ::Qonfig::Commands::Base
  # @api private
  # @option format
  # @option strict
  # @option expose
  # @param file_path [String, Symbol, Pathname]
  # @param caller_location [String]
  # @param format [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#74
  def initialize(file_path, caller_location, format: T.unsafe(nil), strict: T.unsafe(nil), expose: T.unsafe(nil)); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @param settings [Qonfig::Settings]
  # @return [void]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#96
  def call(data_set, settings); end

  # @api private
  # @return [String]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#44
  def caller_location; end

  # @api private
  # @return [NilClass, String, Symbol]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#62
  def expose; end

  # @api private
  # @return [String, Symbol, Pathname]
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#38
  def file_path; end

  # @api private
  # @return [String, Symbol]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#50
  def format; end

  # @api private
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#56
  def strict; end

  private

  # @api private
  # @return [Hash]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#119
  def load_from_file; end

  # @api private
  # @return [Hash]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#132
  def load_from_self; end

  # @api private
  # @raise [Qonfig::IncompatibleDataStructureError]
  # @return [Hash]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#111
  def load_settings_values; end

  # @api private
  # @param file_path [String, Symbol, Pathname]
  # @param format [String, Symbol]
  # @param strict [Boolean]
  # @param expose [NilClass, String, Symbol]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::UnsupportedLoaderError]
  # @return [void]
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#158
  def prevent_incompatible_attributes!(file_path, format, strict, expose); end
end

# @api private
# @return [Symbol]
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#31
Qonfig::Commands::Instantiation::ValuesFile::DEFAULT_FORMAT = T.let(T.unsafe(nil), Symbol)

# @api private
# @return [Boolean]
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#25
Qonfig::Commands::Instantiation::ValuesFile::DEFAULT_STRICT_BEHAVIOR = T.let(T.unsafe(nil), FalseClass)

# @api private
# @return [NilClass]
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#19
Qonfig::Commands::Instantiation::ValuesFile::NO_EXPOSE = T.let(T.unsafe(nil), T.untyped)

# @api private
# @return [Symbol]
# @since 0.17.0
#
# source://qonfig//lib/qonfig/commands/instantiation/values_file.rb#13
Qonfig::Commands::Instantiation::ValuesFile::SELF_LOCATED_FILE_DEFINITION = T.let(T.unsafe(nil), Symbol)

# @api public
# @since 0.21.0
#
# source://qonfig//lib/qonfig/compacted.rb#5
class Qonfig::Compacted < ::BasicObject
  extend ::Qonfig::DSL

  # @api public
  # @param settings_map [Hash<Symbol|String,Any>]
  # @param configuration [Block]
  # @return [void]
  # @see Qonfig::Compacted::Constructor
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/compacted.rb#71
  def initialize(settings_map = T.unsafe(nil), &configuration); end

  # @api public
  # @param key [String, Symbol]
  # @return [Any]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/compacted.rb#85
  def [](key); end

  # @api public
  # @param key [String, Symbol]
  # @param value [Any]
  # @return [void]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/compacted.rb#95
  def []=(key, value); end

  # @api private
  # @return [Qonfig::DataSet]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/compacted.rb#61
  def ____data_set____; end

  class << self
    # @api public
    # @param base_config_klass [Class<Qonfig::Compacted>]
    # @param config_klass_definitions [Block]
    # @raise [::Qonfig::ArgumentError]
    # @return [Qonfig::Compacted]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted.rb#18
    def build(base_config_klass = T.unsafe(nil), &config_klass_definitions); end

    # @api public
    # @param data_set [Qonfig::DataSet]
    # @param configurations [Block]
    # @return [Qonfig::Compacted]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted.rb#33
    def build_from(data_set = T.unsafe(nil), &configurations); end

    # @api public
    # @option init_from
    # @param settings_map [Hash<Symbol|String,Any>]
    # @param configurations [Block]
    # @param init_from [Hash] a customizable set of options
    # @return [Boolean]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted.rb#49
    def valid_with?(settings_map = T.unsafe(nil), &configurations); end
  end
end

# @api private
# @since 0.21.0
#
# source://qonfig//lib/qonfig/compacted/constructor.rb#5
module Qonfig::Compacted::Constructor
  class << self
    # @api private
    # @option settings_map
    # @param compacted_config [Qonfig::Compacted]
    # @param initial_data_set [NilClass, Qonfig::DataSet] Notice: cant define NO_INITIAL_DATA_SET (`nil`) as default value cuz Ruby will autoamtically
    #   transform any Qonfig::DataSet to Hash (thx for kwargs, Ruby >:()
    # @param configuration [Block]
    # @param settings_map [Hash] a customizable set of options
    # @return [void]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted/constructor.rb#23
    def construct(compacted_config, initial_data_set, settings_map: T.unsafe(nil), &configuration); end

    private

    # @api private
    # @param compacted_config [Qonfig::Compacted]
    # @param initial_data_set [Qonfig::DataSet]
    # @param settings_map [Hash<String,Symbol|Any>]
    # @param configuration [Block]
    # @return [void]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted/constructor.rb#52
    def construct_instance_from_data_set(compacted_config, initial_data_set, settings_map, &configuration); end

    # @api private
    # @param compacted_config [Qonfig::Compacted]
    # @param settings_map [Hash<String,Symbol|Any>]
    # @param configuration [Block]
    # @return [void]
    # @see #construct_instance_from_data_set
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted/constructor.rb#74
    def construct_isntance_from_commands(compacted_config, settings_map, &configuration); end

    # @api private
    # @param compacted_config [Qonfig::Compacted]
    # @param initial_data_set [NilClass, Qonfig::DataSet]
    # @return [void]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/compacted/constructor.rb#98
    def prevent_incompatible_attributes!(compacted_config, initial_data_set); end
  end
end

# @api private
# @return [NilClass]
# @since 0.21.0
#
# source://qonfig//lib/qonfig/compacted/constructor.rb#10
Qonfig::Compacted::Constructor::NO_INITIAL_DATA_SET = T.let(T.unsafe(nil), T.untyped)

# @api public
# @since 0.2.0
#
# source://qonfig//lib/qonfig/configurable.rb#5
module Qonfig::Configurable
  include ::Qonfig::Configurable::InstanceMethods

  mixes_in_class_methods ::Qonfig::Configurable::ClassMethods
  mixes_in_class_methods ::Qonfig::Configurable::ClassInheritance

  class << self
    # @api private
    # @param base_klass [Class]
    # @return [void]
    # @since 0.2.0
    #
    # source://qonfig//lib/qonfig/configurable.rb#12
    def included(base_klass); end
  end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/configurable.rb#28
module Qonfig::Configurable::ClassInheritance
  # @api private
  # @param child_klass [Class]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#34
  def inherited(child_klass); end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/configurable.rb#48
module Qonfig::Configurable::ClassMethods
  # @api public
  # @return [Qonfig::DataSet]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#76
  def config; end

  # @api public
  # @param block [Proc]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#54
  def configuration(&block); end

  # @api public
  # @param options_map [Hash]
  # @param block [Proc]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#66
  def configure(options_map = T.unsafe(nil), &block); end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/configurable.rb#85
module Qonfig::Configurable::InstanceMethods
  # @api public
  # @return [Qonfig::DataSet]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#90
  def config; end

  # @api public
  # @param options_map [Hash]
  # @param block [Proc]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#110
  def configure(options_map = T.unsafe(nil), &block); end

  # @api public
  # @return [Qonfig::DataSet]
  # @since 0.6.0
  #
  # source://qonfig//lib/qonfig/configurable.rb#100
  def shared_config; end
end

# @api public
# @see Qonfig::Settings
# @see Qonfig::Settings::KeyGuard
# @see Qonfig::Commands::Definition::AddOption
# @see Qonfig::Commands::Definition::AddNestedOption
# @see Qonfig::Commands::Definition::ReDefineOption
# @since 0.2.0
#
# source://qonfig//lib/qonfig/errors.rb#75
class Qonfig::CoreMethodIntersectionError < ::Qonfig::Error; end

# @api private
# @since 0.25.0
# @version 0.29.0
#
# source://qonfig//lib/qonfig/dsl.rb#6
module Qonfig::DSL
  # @api private
  # @param data_set_klass [Class<Qonfig::DataSet>]
  # @return [void]
  # @see Qonfig::Comamnds::Definition::Compose
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#153
  def compose(data_set_klass); end

  # @api public
  # @param name [String, Symbol]
  # @param validation_logic [Block]
  # @return [void]
  # @see Qonfig::Validation::Building::PredefinedBuilder
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#107
  def define_validator(name, &validation_logic); end

  # @api private
  # @return [Qonfig::CommandSet]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#43
  def definition_commands; end

  # @api public
  # @option via
  # @option env
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param via [Hash] a customizable set of options
  # @param env [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::ExposeJSON
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#254
  def expose_json(file_path, via:, env:, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api public
  # @option env
  # @option format
  # @option replace_on_merge
  # @param env [Hash] a customizable set of options
  # @param format [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::ExposeSelf
  # @since 0.14.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#270
  def expose_self(env:, format: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api public
  # @option via
  # @option env
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param via [Hash] a customizable set of options
  # @param env [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::ExposeYAML
  # @since 0.7.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#236
  def expose_yaml(file_path, via:, env:, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api public
  # @return [void]
  # @see Qonfig::Commands::Instantiation::FreezeState
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#302
  def freeze_state!; end

  # @api private
  # @return [Qonfig::CommandSet]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#51
  def instance_commands; end

  # @api public
  # @option convert_values
  # @option prefix
  # @option replace_on_merge
  # @param convert_values [Hash] a customizable set of options
  # @param prefix [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::LoadFromENV
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#200
  def load_from_env(convert_values: T.unsafe(nil), prefix: T.unsafe(nil), trim_prefix: T.unsafe(nil)); end

  # @api public
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::LoadFromJSON
  # @since 0.5.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#218
  def load_from_json(file_path, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api public
  # @option format
  # @option replace_on_merge
  # @param format [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::LoadFromSelf
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#182
  def load_from_self(format: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api public
  # @option strict
  # @option replace_on_merge
  # @param file_path [String, Pathname]
  # @param strict [Hash] a customizable set of options
  # @param replace_on_merge [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Definition::LoadFromYAML
  # @since 0.2.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#167
  def load_from_yaml(file_path, strict: T.unsafe(nil), replace_on_merge: T.unsafe(nil)); end

  # @api private
  # @return [Qonfig::Validation::Collections::PredefinedRegistry]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#59
  def predefined_validators; end

  # @api public
  # @param key [Symbol, String]
  # @param initial_value [Object]
  # @param nested_settings [Proc]
  # @return [void]
  # @see Qonfig::Comamnds::Definition::ReDefineOption
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#140
  def re_setting(key, initial_value = T.unsafe(nil), &nested_settings); end

  # @api public
  # @param key [Symbol, String]
  # @param initial_value [Object]
  # @param nested_settings [Proc]
  # @return [void]
  # @see Qonfig::Commands::Definition::AddNestedOption
  # @see Qonfig::Commands::Definition::AddOption
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#123
  def setting(key, initial_value = T.unsafe(nil), &nested_settings); end

  # @api public
  # @option by
  # @option stict
  # @param setting_key_pattern [String, Symbol, NilClass]
  # @param predefined [String, Symbol]
  # @param custom_validation [Proc]
  # @param by [Hash] a customizable set of options
  # @param stict [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Validation::Building::InstanceBuilder
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#82
  def validate(setting_key_pattern = T.unsafe(nil), predefined = T.unsafe(nil), strict: T.unsafe(nil), by: T.unsafe(nil), &custom_validation); end

  # @api private
  # @return [Qonfig::Validation::Collections::InstanceCollection]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#67
  def validators; end

  # @api public
  # @option format
  # @option strict
  # @option expose
  # @param file_path [String, Pathname]
  # @param format [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Instantiation::ValuesFile
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/dsl.rb#288
  def values_file(file_path, format: T.unsafe(nil), strict: T.unsafe(nil), expose: T.unsafe(nil)); end

  class << self
    # @api private
    # @param child_klass [Class<Qonfig::DataSet>]
    # @return [void]
    # @see Qonfig::DataSet::ClassBuilder
    # @since 0.1.0
    # @version 0.20.0
    #
    # source://qonfig//lib/qonfig/dsl.rb#19
    def extended(child_klass); end
  end
end

# @api private
# @since 0.21.0
#
# source://qonfig//lib/qonfig/dsl/inheritance.rb#5
module Qonfig::DSL::Inheritance
  class << self
    # @api private
    # @option base
    # @option child
    # @param base [Hash] a customizable set of options
    # @param child [Hash] a customizable set of options
    # @return [void]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/dsl/inheritance.rb#13
    def inherit(base:, child:); end
  end
end

# @api public
# @since 0.12.0
#
# source://qonfig//lib/qonfig/data_set.rb#5
class Qonfig::DataSet
  extend ::Qonfig::DSL

  # @api public
  # @param settings_map [Hash]
  # @param configurations [Proc]
  # @return [DataSet] a new instance of DataSet
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#64
  def initialize(settings_map = T.unsafe(nil), &configurations); end

  # @api public
  # @param key [String, Symbol]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#253
  def [](key); end

  # @api public
  # @param key [String, Symbol]
  # @param value [Any]
  # @raise [Qonfig::UnknownSettingError]
  # @raise [Qonfig::FrozenSettingsError]
  # @raise [Qonfig::AmbiguousSettingValueError]
  # @return [void]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#267
  def []=(key, value); end

  # @api public
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#322
  def clear!; end

  # @api public
  # @return [Qonfig::Compacted]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#480
  def compacted; end

  # @api public
  # @param settings_map [Hash]
  # @return [void]
  # @since 0.1.0
  # @yield [cofnig]
  # @yieldparam config [Qonfig::Settings]
  #
  # source://qonfig//lib/qonfig/data_set.rb#181
  def configure(settings_map = T.unsafe(nil), &configurations); end

  # @api public
  # @option yield_all
  # @param block [Proc]
  # @param yield_all [Hash] a customizable set of options
  # @return [Enumerable]
  # @since 0.13.0
  # @yield [setting_key, setting_value]
  # @yieldparam setting_key [String]
  # @yieldparam setting_value [Object]
  #
  # source://qonfig//lib/qonfig/data_set.rb#349
  def deep_each_setting(yield_all: T.unsafe(nil), &block); end

  # @api public
  # @param keys [Array<String, Symbol>]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#276
  def dig(*keys); end

  # @api public
  # @option path
  # @option options
  # @param value_processor [Block]
  # @param path [Hash] a customizable set of options
  # @param options [Hash] a customizable set of options
  # @return [void]
  # @since 0.11.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#216
  def dump_to_json(path:, options: T.unsafe(nil), &value_processor); end

  # @api public
  # @option path
  # @option symbolize_keys
  # @option options
  # @param value_processor [Block]
  # @param path [Hash] a customizable set of options
  # @param symbolize_keys [Hash] a customizable set of options
  # @param options [Hash] a customizable set of options
  # @return [void]
  # @since 0.11.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#231
  def dump_to_yaml(path:, symbolize_keys: T.unsafe(nil), options: T.unsafe(nil), &value_processor); end

  # @api public
  # @return [Qonfig::DataSet]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#437
  def dup; end

  # @api public
  # @param block [Proc]
  # @return [Enumerable]
  # @since 0.13.0
  # @yield [setting_key, setting_value]
  # @yieldparam setting_key [String]
  # @yieldparam setting_value [Object]
  #
  # source://qonfig//lib/qonfig/data_set.rb#335
  def each_setting(&block); end

  # @api public
  # @option mappings
  # @option raw
  # @option prefix
  # @option accessor
  # @param exportable_object [Object]
  # @param exported_setting_keys [Array<String,Symbol>]
  # @param mappings [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param prefix [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [void]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#455
  def export_settings(exportable_object, *exported_setting_keys, mappings: T.unsafe(nil), raw: T.unsafe(nil), prefix: T.unsafe(nil), accessor: T.unsafe(nil)); end

  # @api public
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#73
  def freeze!; end

  # @api public
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#81
  def frozen?; end

  # @api public
  # @param key_path [Array<String, Symbol>]
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#312
  def key?(*key_path); end

  # @api public
  # @option all_variants
  # @option only_root
  # @param all_variants [Hash] a customizable set of options
  # @param only_root [Hash] a customizable set of options
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#396
  def keys(all_variants: T.unsafe(nil), only_root: T.unsafe(nil)); end

  # @api public
  # @option format
  # @option strict
  # @option expose
  # @param file_path [String, Symbol, Pathname]
  # @param configurations [Block]
  # @param format [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::DataSet#load_setting_values_from_file
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#112
  def load_from_file(file_path, format: T.unsafe(nil), strict: T.unsafe(nil), expose: T.unsafe(nil), &configurations); end

  # @api public
  # @option strict
  # @option expose
  # @param file_path [String, Symbol, Pathname]
  # @param configurations [Block]
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::DataSet#load_from_file
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#146
  def load_from_json(file_path, strict: T.unsafe(nil), expose: T.unsafe(nil), &configurations); end

  # @api public
  # @option format
  # @option strict
  # @option expose
  # @param configurations [Block]
  # @param format [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @since 0.17.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#159
  def load_from_self(format: T.unsafe(nil), strict: T.unsafe(nil), expose: T.unsafe(nil), &configurations); end

  # @api public
  # @option strict
  # @option expose
  # @param file_path [String, Symbol, Pathname]
  # @param configurations [Block]
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::DataSet#load_from_file
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#131
  def load_from_yaml(file_path, strict: T.unsafe(nil), expose: T.unsafe(nil), &configurations); end

  # @api public
  # @param key_path [Array<String, Symbol>]
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#312
  def option?(*key_path); end

  # @api public
  # @param settings_map [Hash]
  # @param configurations [Proc]
  # @raise [Qonfig::FrozenSettingsError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#93
  def reload!(settings_map = T.unsafe(nil), &configurations); end

  # @api public
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#406
  def root_keys; end

  # @api public
  # @option path
  # @option options
  # @param value_processor [Block]
  # @param path [Hash] a customizable set of options
  # @param options [Hash] a customizable set of options
  # @return [void]
  # @since 0.11.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#216
  def save_to_json(path:, options: T.unsafe(nil), &value_processor); end

  # @api public
  # @option path
  # @option symbolize_keys
  # @option options
  # @param value_processor [Block]
  # @param path [Hash] a customizable set of options
  # @param symbolize_keys [Hash] a customizable set of options
  # @param options [Hash] a customizable set of options
  # @return [void]
  # @since 0.11.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#231
  def save_to_yaml(path:, symbolize_keys: T.unsafe(nil), options: T.unsafe(nil), &value_processor); end

  # @api public
  # @param key_path [Array<String, Symbol>]
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#312
  def setting?(*key_path); end

  # @api public
  # @return [Qonfig::Settings]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#57
  def settings; end

  # @api public
  # @param keys [Array<String, Symbol>]
  # @return [Hash]
  # @since 0.9.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#285
  def slice(*keys); end

  # @api public
  # @param keys [Array<String, Symbol>]
  # @return [Hash, Any]
  # @since 0.10.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#294
  def slice_value(*keys); end

  # @api private
  # @param keys [Array<String, Symbol, Array<String, Symbol>>]
  # @return [Hash]
  # @since 0.16.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#303
  def subset(*keys); end

  # @api public
  # @option dot_style
  # @option key_transformer
  # @option value_transformer
  # @param dot_style [Hash] a customizable set of options
  # @param key_transformer [Hash] a customizable set of options
  # @param value_transformer [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#194
  def to_h(dot_style: T.unsafe(nil), key_transformer: T.unsafe(nil), value_transformer: T.unsafe(nil)); end

  # @api public
  # @option dot_style
  # @option key_transformer
  # @option value_transformer
  # @param dot_style [Hash] a customizable set of options
  # @param key_transformer [Hash] a customizable set of options
  # @param value_transformer [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#194
  def to_hash(dot_style: T.unsafe(nil), key_transformer: T.unsafe(nil), value_transformer: T.unsafe(nil)); end

  # @api public
  # @return [Boolean]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#357
  def valid?; end

  # @api public
  # @param settings_map [Hash<String,Symbol|Any>]
  # @return [Boolean]
  # @since 0.19.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#367
  def valid_with?(settings_map = T.unsafe(nil), &configurations); end

  # @api public
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#386
  def validate!; end

  # @api public
  # @param temporary_configurations [Hash<Symbol|String,Any>]
  # @param arbitary_code [Block]
  # @return [void]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#416
  def with(temporary_configurations = T.unsafe(nil), &arbitary_code); end

  private

  # @api private
  # @param settings_map [Hash]
  # @param configurations [Proc]
  # @return [void]
  # @since 0.13.0
  # @yield [settings]
  #
  # source://qonfig//lib/qonfig/data_set.rb#499
  def apply_settings(settings_map = T.unsafe(nil), &configurations); end

  # @api private
  # @param settings_map [Hash]
  # @param configurations [Proc]
  # @return [void]
  # @since 0.2.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#511
  def load!(settings_map = T.unsafe(nil), &configurations); end

  # @api private
  # @option format
  # @option strict
  # @option expose
  # @option callcer_location
  # @param file_path [String, Symbol, Pathname]
  # @param configurations [Block]
  # @param format [Hash] a customizable set of options
  # @param strict [Hash] a customizable set of options
  # @param expose [Hash] a customizable set of options
  # @param callcer_location [Hash] a customizable set of options
  # @return [void]
  # @see Qonfig::Commands::Instantiation::ValuesFile
  # @since 0.17.0
  # @version 0.22.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#532
  def load_setting_values_from_file(file_path, format: T.unsafe(nil), strict: T.unsafe(nil), expose: T.unsafe(nil), caller_location: T.unsafe(nil), &configurations); end

  # @api private
  # @param instructions [Block]
  # @return [Any]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#551
  def thread_safe_access(&instructions); end

  # @api private
  # @param instructions [Block]
  # @return [Any]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#560
  def thread_safe_definition(&instructions); end

  # @api private
  # @return [Qonfig::Validation::Validators::Composite]
  # @since 0.13.0
  # @version 0.20.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#491
  def validator; end

  # @api priavte
  # @param instructions [Block]
  # @return [Any]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set.rb#569
  def with_arbitary_access(&instructions); end

  class << self
    # @api public
    # @param base_dataset_klass [Class<Qonfig::DataSet>]
    # @param config_klass_definitions [Proc]
    # @return [Qonfig::DataSet]
    # @since 0.16.0
    #
    # source://qonfig//lib/qonfig/data_set.rb#20
    def build(base_dataset_klass = T.unsafe(nil), &config_klass_definitions); end

    # @api public
    # @param base_dataset_klass [Class<Qonfig::DataSet>]
    # @param config_klass_definitions [Proc]
    # @return [Qonfig::Compacted]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/data_set.rb#34
    def build_compacted(base_dataset_klass = T.unsafe(nil), &config_klass_definitions); end

    # @api public
    # @param settings_map [Hash<Symbol|String,Any>]
    # @param configurations [Block]
    # @return [Boolean]
    # @since 0.19.0
    # @version 0.21.0
    #
    # source://qonfig//lib/qonfig/data_set.rb#45
    def valid_with?(settings_map = T.unsafe(nil), &configurations); end
  end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/data_set/class_builder.rb#5
module Qonfig::DataSet::ClassBuilder
  class << self
    # @api private
    # @param hash [Hash]
    # @return [Class<Qonfig::DataSet>]
    # @see Qonfig::DataSet
    # @since 0.2.0
    #
    # source://qonfig//lib/qonfig/data_set/class_builder.rb#14
    def build_from_hash(hash); end
  end
end

# @api private
# @since 0.13.0
#
# source://qonfig//lib/qonfig/data_set/lock.rb#5
class Qonfig::DataSet::Lock
  # @api private
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#10
  def initialize; end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#30
  def thread_safe_access(&instructions); end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#46
  def thread_safe_definition(&instructions); end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#21
  def with_arbitary_access(&instructions); end

  private

  # @api private
  # @return [Mutex]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#63
  def access_lock; end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#91
  def acquire_access_lock(&instructions); end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#82
  def acquire_arbitary_lock(&instructions); end

  # @api private
  # @param instructions [Block]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#100
  def acquire_definition_lock(&instructions); end

  # @api private
  # @return [Mutex]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#75
  def arbitary_lock; end

  # @api private
  # @return [Mutex]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/data_set/lock.rb#69
  def definition_lock; end
end

# @api public
# @see Qonfig::Loaders::Dynamic
# @since 0.17.0
#
# source://qonfig//lib/qonfig/errors.rb#153
class Qonfig::DynamicLoaderParseError < ::Qonfig::Error; end

# @api public
# @since 0.1.0
#
# source://qonfig//lib/qonfig/errors.rb#6
class Qonfig::Error < ::StandardError; end

# @api public
# @see Qonfig::Commands::Definition::ExposeYAML
# @since 0.7.0
#
# source://qonfig//lib/qonfig/errors.rb#171
class Qonfig::ExposeError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Loaders::YAML
# @since 0.2.0
#
# source://qonfig//lib/qonfig/errors.rb#126
class Qonfig::FileNotFoundError < ::Errno::ENOENT; end

# @api public
# @since 0.19.0
#
# source://qonfig//lib/qonfig/errors.rb#82
class Qonfig::FrozenError < ::FrozenError; end

# @api public
# @see Qonfig::Settings
# @see Qonfig::DataSet
# @since 0.1.0
# @version 0.19.0
#
# source://qonfig//lib/qonfig/errors.rb#95
class Qonfig::FrozenSettingsError < ::Qonfig::FrozenError; end

# @api public
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports.rb#5
module Qonfig::Imports
  include ::Qonfig::Imports::DSL

  mixes_in_class_methods ::Qonfig::Imports::DSL::ClassMethods

  class << self
    # @api private
    # @param base_klass [Class]
    # @return [void]
    # @since 0.18.0
    #
    # source://qonfig//lib/qonfig/imports.rb#19
    def included(base_klass); end
  end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/abstract.rb#5
class Qonfig::Imports::Abstract
  # @api private
  # @option prefix
  # @option raw
  # @option accessor
  # @param seeded_klass [Class]
  # @param imported_config [Qonfig::DataSet]
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#34
  def initialize(seeded_klass, imported_config, prefix: T.unsafe(nil), raw: T.unsafe(nil), accessor: T.unsafe(nil)); end

  # @api private
  # @param settings_interface [Module]
  # @raise [NoMethodError]
  # @return [void]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#53
  def import!(settings_interface = T.unsafe(nil)); end

  private

  # @api private
  # @return [Boolean]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#89
  def accessor; end

  # @api private
  # @return [Qonfig::DataSet]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#83
  def imported_config; end

  # @api private
  # @return [String, Symbol]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#71
  def prefix; end

  # @api private
  # @param imported_config [Qonfig::DataSet]
  # @param prefix [String, Symbol]
  # @raise [Qonfig::IncompatibleImportedConfigError]
  # @raise [Qonfig::IncorrectImportPrefixError]
  # @return [void]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#100
  def prevent_incompatible_import_params!(imported_config, prefix); end

  # @api private
  # @return [Boolean]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#65
  def raw; end

  # @api private
  # @return [Class]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/abstract.rb#77
  def seeded_klass; end
end

# @api private
# @return [Boolean]
# @since 0.21.0
#
# source://qonfig//lib/qonfig/imports/abstract.rb#22
Qonfig::Imports::Abstract::AS_ACCESSOR = T.let(T.unsafe(nil), FalseClass)

# @api private
# @return [Boolean]
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/abstract.rb#16
Qonfig::Imports::Abstract::DEFAULT_RAW_BEHAVIOR = T.let(T.unsafe(nil), FalseClass)

# @api private
# @return [String]
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/abstract.rb#10
Qonfig::Imports::Abstract::EMPTY_PREFIX = T.let(T.unsafe(nil), String)

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/dsl.rb#5
module Qonfig::Imports::DSL
  mixes_in_class_methods ::Qonfig::Imports::DSL::ClassMethods

  class << self
    # @api private
    # @param base_klass [Class]
    # @return [void]
    # @since 0.18.0
    #
    # source://qonfig//lib/qonfig/imports/dsl.rb#12
    def included(base_klass); end
  end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/dsl.rb#19
module Qonfig::Imports::DSL::ClassMethods
  # @api public
  # @option prefix
  # @option raw
  # @option mappings
  # @option accessor
  # @param imported_config [Qonfig::DataSet]
  # @param imported_setting_keys [Array<String,Symbol>]
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param mappings [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/dsl.rb#31
  def import_settings(imported_config, *imported_setting_keys, prefix: T.unsafe(nil), raw: T.unsafe(nil), mappings: T.unsafe(nil), accessor: T.unsafe(nil)); end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/direct_key.rb#5
class Qonfig::Imports::DirectKey < ::Qonfig::Imports::Abstract
  # @api private
  # @option prefix
  # @option raw
  # @option accessor
  # @param seeded_klass [Class]
  # @param imported_config [Qonfig::DataSet]
  # @param keys [Array<String,Symbol>]
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#17
  def initialize(seeded_klass, imported_config, *keys, prefix: T.unsafe(nil), raw: T.unsafe(nil), accessor: T.unsafe(nil)); end

  # @api private
  # @param settings_interfcae [Module]
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#41
  def import!(settings_interface = T.unsafe(nil)); end

  private

  # @api private
  # @param keys [Array<String,Symbol>]
  # @return [Array<Qonfig::KeyMatcher>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#132
  def build_setting_key_matchers(keys); end

  # @api private
  # @return [Array<Qonfig::Settings::KeyMatcher>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#103
  def key_matchers; end

  # @api private
  # @return [Array<String,Symbol>]
  # @since 0.18.8
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#97
  def keys; end

  # @api private
  # @param imported_config [Qonfig::DataSet]
  # @param prefix [String, Symbol]
  # @param keys [Array<String,Symbol>]
  # @raise [Qonfig::IncompatibleImportedConfigError]
  # @raise [Qonfig::IncorrectImportPrefixError]
  # @raise [Qonfig::IncorrectImportKeyError]
  # @return [void]
  # @see Qonfig::Imports::Abstract#prevent_incompatible_import_params
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/direct_key.rb#118
  def prevent_incompatible_import_params!(imported_config, prefix, keys); end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/export.rb#5
module Qonfig::Imports::Export
  class << self
    # @api private
    # @option mappings
    # @option raw
    # @option prefix
    # @option accessor
    # @param exportable_object [Object]
    # @param exported_config [Qonfig::DataSet]
    # @param exported_setting_keys [Array<String,Symbol>]
    # @param mappings [Hash] a customizable set of options
    # @param raw [Hash] a customizable set of options
    # @param prefix [Hash] a customizable set of options
    # @param accessor [Hash] a customizable set of options
    # @return [void]
    # @since 0.18.0
    # @version 0.21.0
    #
    # source://qonfig//lib/qonfig/imports/export.rb#19
    def export!(exportable_object, exported_config, *exported_setting_keys, mappings: T.unsafe(nil), raw: T.unsafe(nil), prefix: T.unsafe(nil), accessor: T.unsafe(nil)); end
  end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/general.rb#5
class Qonfig::Imports::General
  # @api private
  # @option mappings
  # @option prefix
  # @option raw
  # @option accessor
  # @param seeded_klass [Class, Object]
  # @param imported_config [Qonfig::DataSet]
  # @param imported_keys [Array<String, Symbol>]
  # @param mappings [Hash] a customizable set of options
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [General] a new instance of General
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#52
  def initialize(seeded_klass, imported_config, *imported_keys, mappings: T.unsafe(nil), prefix: T.unsafe(nil), raw: T.unsafe(nil), accessor: T.unsafe(nil)); end

  # @api private
  # @param settings_interface [Module]
  # @return [void]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#87
  def import!(settings_interface = T.unsafe(nil)); end

  private

  # @api private
  # @option prefix
  # @option raw
  # @option accessor
  # @param seeded_klass [Class]
  # @param imported_config [Qonfig::DataSet]
  # @param imported_keys [Array<String,Symbol>]
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [Qonfig::Imports::DirectKey]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#124
  def build_direct_key_importer(seeded_klass, imported_config, *imported_keys, prefix:, raw:, accessor:); end

  # @api private
  # @option mappings
  # @option prefix
  # @option raw
  # @option accessor
  # @param seeded_klass [Class]
  # @param imported_config [Qonfig::DataSet]
  # @param mappings [Hash] a customizable set of options
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [Qonfig::Imports::Mappings]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#153
  def build_mappings_importer(seeded_klass, imported_config, mappings:, prefix:, raw:, accessor:); end

  # @api private
  # @return [Qonfig::Imports::DirectKey]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#105
  def direct_key_importer; end

  # @api private
  # @return [Qonfig::Imports::Mappings]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#111
  def mappings_importer; end

  # @api private
  # @return [Class]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/general.rb#99
  def seeded_klass; end

  class << self
    # @api private
    # @option mappings
    # @option prefix
    # @option raw
    # @option accessor
    # @param seeded_klass [Class, Object]
    # @param imported_config [Qonfig::DataSet]
    # @param imported_keys [Array<String, Symbol>]
    # @param mappings [Hash] a customizable set of options
    # @param prefix [Hash] a customizable set of options
    # @param raw [Hash] a customizable set of options
    # @param accessor [Hash] a customizable set of options
    # @since 0.18.0
    # @version 0.21.0
    #
    # source://qonfig//lib/qonfig/imports/general.rb#19
    def import!(seeded_klass, imported_config, *imported_keys, mappings: T.unsafe(nil), prefix: T.unsafe(nil), raw: T.unsafe(nil), accessor: T.unsafe(nil)); end
  end
end

# @api private
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/mappings.rb#5
class Qonfig::Imports::Mappings < ::Qonfig::Imports::Abstract
  # @api private
  # @option prefix
  # @option raw
  # @option mappings
  # @option accessor
  # @param seeded_klass [Class]
  # @param imported_config [Qonfig::DataSet]
  # @param prefix [Hash] a customizable set of options
  # @param raw [Hash] a customizable set of options
  # @param mappings [Hash] a customizable set of options
  # @param accessor [Hash] a customizable set of options
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#23
  def initialize(seeded_klass, imported_config, mappings: T.unsafe(nil), prefix: T.unsafe(nil), raw: T.unsafe(nil), accessor: T.unsafe(nil)); end

  # @api private
  # @param settings_interface [Module]
  # @return [void]
  # @since 0.18.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#47
  def import!(settings_interface = T.unsafe(nil)); end

  private

  # @api private
  # @param mappings [Hash<Symbol|String,Symbol|String>]
  # @return [Hash<String|Symbol,Qonfig::Settings::KeyMatcher>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#140
  def build_setting_key_matchers(mappings); end

  # @api private
  # @return [Hash<String|Symbol,Qonfig::Settings::KeyMatcher>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#108
  def key_matchers; end

  # @api private
  # @return [Hash<Symbol|String,Symbol|String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#102
  def mappings; end

  # @api private
  # @param imported_config [Qonfig::DataSet]
  # @param prefix [String, Symbol]
  # @param mappings [Hash<Symbol|String,Symbol|String>]
  # @raise [Qonfig::IncompatibleImportedConfigError]
  # @raise [Qonfig::IncorrectImportPrefixError]
  # @raise [Qonfig::IncorrectImportMappingsError]
  # @return [void]
  # @see Qonfig::Imports::Abstract#prevent_incompatible_import_params!
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/imports/mappings.rb#123
  def prevent_incompatible_import_params!(imported_config, prefix, mappings); end
end

# @api private
# @return [Hash]
# @since 0.18.0
#
# source://qonfig//lib/qonfig/imports/mappings.rb#10
Qonfig::Imports::Mappings::EMPTY_MAPPINGS = T.let(T.unsafe(nil), Hash)

# @api public
# @see Qonfig::Commands::Instantiation::ValuesFile
# @since 0.17.0
#
# source://qonfig//lib/qonfig/errors.rb#101
class Qonfig::IncompatibleDataStructureError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Commands::Definition::LoadFromSelf
# @see Qonfig::Commands::Definition::ExposeSelf
# @since 0.15.0
#
# source://qonfig//lib/qonfig/errors.rb#120
class Qonfig::IncompatibleEndDataStructureError < ::Qonfig::IncompatibleDataStructureError; end

# @api public
# @see Qonfig::Imports::Abstract
# @since 0.18.0
#
# source://qonfig//lib/qonfig/errors.rb#189
class Qonfig::IncompatibleImportedConfigError < ::Qonfig::ArgumentError; end

# @api public
# @see Qonfig::Commands::Definition::LoadFromJSON
# @since 0.5.0
#
# source://qonfig//lib/qonfig/errors.rb#113
class Qonfig::IncompatibleJSONStructureError < ::Qonfig::IncompatibleDataStructureError; end

# @api public
# @see Qonfig::Commands::Definition::LoadFromYAML
# @since 0.2.0
#
# source://qonfig//lib/qonfig/errors.rb#107
class Qonfig::IncompatibleYAMLStructureError < ::Qonfig::IncompatibleDataStructureError; end

# @api public
# @since 0.11.0
#
# source://qonfig//lib/qonfig/errors.rb#39
class Qonfig::IncorrectHashTransformationError < ::Qonfig::ArgumentError; end

# @api public
# @see Qonfig::Imports::DirectKey
# @since 0.18.0
#
# source://qonfig//lib/qonfig/errors.rb#195
class Qonfig::IncorrectImportKeyError < ::Qonfig::ArgumentError; end

# @api public
# @see Qonfig::Imports::Mappings
# @since 0.18.0
#
# source://qonfig//lib/qonfig/errors.rb#207
class Qonfig::IncorrectImportMappingsError < ::Qonfig::ArgumentError; end

# @api public
# @see Qonfig::Imports::Abstract
# @since 0.18.0
#
# source://qonfig//lib/qonfig/errors.rb#201
class Qonfig::IncorrectImportPrefixError < ::Qonfig::ArgumentError; end

# @api public
# @since 0.11.0
#
# source://qonfig//lib/qonfig/errors.rb#43
class Qonfig::IncorrectKeyTransformerError < ::Qonfig::IncorrectHashTransformationError; end

# @api public
# @since 0.11.0
#
# source://qonfig//lib/qonfig/errors.rb#47
class Qonfig::IncorrectValueTransformerError < ::Qonfig::IncorrectHashTransformationError; end

# @api public
# @see Qonfig::Loaders::JSON
# @see Qonfig::Loaders::Dynamic
# @since 0.17.0
#
# source://qonfig//lib/qonfig/errors.rb#140
class Qonfig::JSONLoaderParseError < ::JSON::ParserError; end

# @api private
# @since 0.15.0
#
# source://qonfig//lib/qonfig/loaders.rb#5
module Qonfig::Loaders
  class << self
    # @api private
    # @param format [String, Symbol]
    # @raise [Qonfig::UnsupportedLoaderFormatError]
    # @return [Module]
    # @since 0.15.0
    #
    # source://qonfig//lib/qonfig/loaders.rb#20
    def [](format); end

    # @api private
    # @param format [String, Symbol]
    # @raise [Qonfig::UnsupportedLoaderFormatError]
    # @return [Module]
    # @since 0.15.0
    #
    # source://qonfig//lib/qonfig/loaders.rb#20
    def resolve(format); end
  end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/loaders/basic.rb#6
class Qonfig::Loaders::Basic
  class << self
    # @api private
    # @param data [String]
    # @return [void]
    # @since 0.5.0
    #
    # source://qonfig//lib/qonfig/loaders/basic.rb#13
    def load(data); end

    # @api private
    # @return [void]
    # @since 0.5.0
    #
    # source://qonfig//lib/qonfig/loaders/basic.rb#21
    def load_empty_data; end

    # @api private
    # @option fail_on_unexist
    # @param file_path [String, Pathname]
    # @param fail_on_unexist [Hash] a customizable set of options
    # @raise [Qonfig::FileNotFoundError]
    # @return [Object]
    # @since 0.5.0
    #
    # source://qonfig//lib/qonfig/loaders/basic.rb#33
    def load_file(file_path, fail_on_unexist: T.unsafe(nil)); end
  end
end

# @api private
# @since 0.17.0
#
# source://qonfig//lib/qonfig/loaders/dynamic.rb#5
class Qonfig::Loaders::Dynamic < ::Qonfig::Loaders::Basic
  class << self
    # @api private
    # @param data [String]
    # @raise [Qonfig::DynamicLoaderParseError]
    # @return [Object]
    # @since 0.17.0
    #
    # source://qonfig//lib/qonfig/loaders/dynamic.rb#14
    def load(data); end

    # @api private
    # @return [Hash]
    # @since 0.17.0
    #
    # source://qonfig//lib/qonfig/loaders/dynamic.rb#28
    def load_empty_data; end

    private

    # @api private
    # @param data [String]
    # @return [Object]
    # @since 0.17.0
    #
    # source://qonfig//lib/qonfig/loaders/dynamic.rb#48
    def try_to_load_json_data(data); end

    # @api private
    # @param data [String]
    # @return [Object]
    # @since 0.17.0
    #
    # source://qonfig//lib/qonfig/loaders/dynamic.rb#39
    def try_to_load_yaml_data(data); end
  end
end

# @api private
# @since 0.15.0
#
# source://qonfig//lib/qonfig/loaders/end_data.rb#5
module Qonfig::Loaders::EndData
  class << self
    # @api private
    # @param caller_location [String]
    # @raise [Qonfig::SelfDataNotFoundError]
    # @return [String]
    # @since 0.15.0
    #
    # source://qonfig//lib/qonfig/loaders/end_data.rb#14
    def extract(caller_location); end
  end
end

# @api private
# @since 0.5.0
#
# source://qonfig//lib/qonfig/loaders/json.rb#5
class Qonfig::Loaders::JSON < ::Qonfig::Loaders::Basic
  class << self
    # @api private
    # @param data [String]
    # @raise [Qonfig::JSONLoaderParseError]
    # @return [Object]
    # @since 0.5.0
    # @version 0.26.0
    #
    # source://qonfig//lib/qonfig/loaders/json.rb#15
    def load(data); end

    # @api private
    # @return [Object]
    # @since 0.5.0
    #
    # source://qonfig//lib/qonfig/loaders/json.rb#27
    def load_empty_data; end
  end
end

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/loaders/yaml.rb#5
class Qonfig::Loaders::YAML < ::Qonfig::Loaders::Basic
  class << self
    # @api private
    # @param data [String]
    # @raise [Qonfig::YAMLLoaderParseError]
    # @return [Object]
    # @since 0.2.0
    # @version 0.27.0
    #
    # source://qonfig//lib/qonfig/loaders/yaml.rb#15
    def load(data); end

    # @api private
    # @return [Object]
    # @since 0.5.0
    #
    # source://qonfig//lib/qonfig/loaders/yaml.rb#35
    def load_empty_data; end
  end
end

# @api public
# @since 0.12.0
#
# source://qonfig//lib/qonfig/errors.rb#35
class Qonfig::PluginError < ::Qonfig::Error; end

# @api public
# @since 0.4.0
#
# source://qonfig//lib/qonfig/plugins.rb#5
module Qonfig::Plugins
  class << self
    # @api public
    # @param plugin_name [Symbol, String]
    # @return [void]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#24
    def load(plugin_name); end

    # @api public
    # @return [Array<String>]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#32
    def loaded_plugins; end

    # @api public
    # @return [Array<String>]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#46
    def names; end

    # @api private
    # @param plugin_name [Symbol, String]
    # @return [void]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#55
    def register_plugin(plugin_name, plugin_module); end

    private

    # @api private
    # @return [Mutex]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#71
    def access_lock; end

    # @api private
    # @return [Qonfig::Plugins::Registry]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#65
    def plugin_registry; end

    # @api private
    # @return [void]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins.rb#77
    def thread_safe; end
  end
end

# @api private
# @since 0.4.0
#
# source://qonfig//lib/qonfig/plugins/abstract.rb#5
class Qonfig::Plugins::Abstract
  class << self
    # @api private
    # @param child_klass [Class]
    # @return [void]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/plugins/abstract.rb#12
    def inherited(child_klass); end

    # @api private
    # @return [void]
    # @since 0.4.0
    #
    # source://qonfig//lib/qonfig/plugins/abstract.rb#21
    def load!; end

    # @api private
    # @return [Boolean]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/plugins/abstract.rb#30
    def loaded?; end

    private

    # @api private
    # @return [void]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/plugins/abstract.rb#40
    def install!; end
  end
end

# @api private
# @since 0.4.0
#
# source://qonfig//lib/qonfig/plugins/access_mixin.rb#5
module Qonfig::Plugins::AccessMixin
  # @api public
  # @param plugin_name [Symbol, String]
  # @return [void]
  # @see Qonfig::Plugins
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#13
  def enable(plugin_name); end

  # @api private
  # @return [Array<String>]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#33
  def enabled_plugins; end

  # @api public
  # @param plugin_name [Symbol, String]
  # @return [void]
  # @see Qonfig::Plugins
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#13
  def load(plugin_name); end

  # @api private
  # @return [Array<String>]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#33
  def loaded_plugins; end

  # @api public
  # @param plugin_name [Symbol, String]
  # @return [void]
  # @see Qonfig::Plugins
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#13
  def plugin(plugin_name); end

  # @api public
  # @return [Array<String>]
  # @see Qonfig::Plugins
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#25
  def plugins; end

  # @api public
  # @param plugin_name [String, Symbol]
  # @param plugin_klass [Class<Qonfig::Plugins::Abstract>]
  # @return [void]
  # @see Qonfig::Plugins
  # @since 0.12.0
  #
  # source://qonfig//lib/qonfig/plugins/access_mixin.rb#46
  def register_plugin(plugin_name, plugin_klass); end
end

# @api private
# @since 0.19.0
#
# source://qonfig//lib/qonfig/plugins/pretty_print.rb#5
class Qonfig::Plugins::PrettyPrint < ::Qonfig::Plugins::Abstract
  class << self
    # @api private
    # @return [void]
    # @since 0.19.0
    # @version 0.24.0
    #
    # source://qonfig//lib/qonfig/plugins/pretty_print.rb#12
    def install!; end
  end
end

# @api private
# @since 0.4.0
#
# source://qonfig//lib/qonfig/plugins/registry.rb#5
class Qonfig::Plugins::Registry
  include ::Enumerable

  # @api private
  # @return [void]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#13
  def initialize; end

  # @api private
  # @param plugin_name [Symbol, String]
  # @return [Qonfig::Plugins::Abstract]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#23
  def [](plugin_name); end

  # @api private
  # @param plugin_name [Symbol, String]
  # @param plugin_module [Qonfig::Plugins::Abstract]
  # @return [void]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#33
  def []=(plugin_name, plugin_module); end

  # @api private
  # @param block [Block]
  # @return [Enumerable]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#51
  def each(&block); end

  # @api private
  # @return [Array<String>]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#42
  def names; end

  # @api private
  # @param plugin_name [Symbol, String]
  # @param plugin_module [Qonfig::Plugins::Abstract]
  # @return [void]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#33
  def register(plugin_name, plugin_module); end

  private

  # @api private
  # @return [Mutex]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#67
  def access_lock; end

  # @api private
  # @param plugin_name [Symbol, String]
  # @param plugin_module [Qonfig::Plugins::Abstract]
  # @raise [Qonfig::AlreadyRegisteredPluginError]
  # @return [void]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#111
  def apply(plugin_name, plugin_module); end

  # @api private
  # @param plugin_name [Symbol, String]
  # @raise [Qonfig::UnregisteredPluginError]
  # @return [Qonfig::Plugins::Abstract]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#128
  def fetch(plugin_name); end

  # @api private
  # @param key [Symbol, String]
  # @return [String]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#143
  def indifferently_accessable_plugin_name(plugin_name); end

  # @api private
  # @param block [Block]
  # @return [Enumerable]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#90
  def iterate(&block); end

  # @api private
  # @return [Array<String>]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#81
  def plugin_names; end

  # @api private
  # @return [Hash]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#61
  def plugin_set; end

  # @api private
  # @param plugin_name [String]
  # @return [Boolean]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#99
  def registered?(plugin_name); end

  # @api private
  # @return [void]
  # @since 0.4.0
  #
  # source://qonfig//lib/qonfig/plugins/registry.rb#73
  def thread_safe; end
end

# @api private
# @since 0.12.0
#
# source://qonfig//lib/qonfig/plugins/toml.rb#5
class Qonfig::Plugins::TOML < ::Qonfig::Plugins::Abstract
  class << self
    # @api private
    # @raise [Qonfig::UnresolvedPluginDependencyError]
    # @return [void]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/plugins/toml.rb#11
    def install!; end
  end
end

# @api private
# @since 0.25.0
#
# source://qonfig//lib/qonfig/plugins/vault.rb#5
class Qonfig::Plugins::Vault < ::Qonfig::Plugins::Abstract
  class << self
    # @api private
    # @raise [Qonfig::UnresolvedPluginDependencyError]
    # @return [void]
    # @since 0.25.0
    #
    # source://qonfig//lib/qonfig/plugins/vault.rb#11
    def install!; end
  end
end

# @api public
# @see Qonfig::Commands::Definition::LoadFromSelf
# @see Qonfig::Loaders::EndData
# @since 0.2.0
#
# source://qonfig//lib/qonfig/errors.rb#133
class Qonfig::SelfDataNotFoundError < ::Qonfig::Error; end

# @api private
# @since 0.1.0
#
# source://qonfig//lib/qonfig/settings.rb#6
class Qonfig::Settings
  # @api private
  # @return [Settings] a new instance of Settings
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#51
  def initialize(__mutation_callbacks__); end

  # @api public
  # @param key [Symbol, String]
  # @raise [Qonfig::ArgumentError]
  # @return [Object]
  # @since 0.1.0
  # @version 0.25.0
  #
  # source://qonfig//lib/qonfig/settings.rb#151
  def [](*keys); end

  # @api public
  # @param key [String, Symbol]
  # @param value [Object]
  # @return [void]
  # @since 0.1.0
  # @version 0.21.0
  #
  # source://qonfig//lib/qonfig/settings.rb#162
  def []=(key, value); end

  # @api private
  # @option with_redefinition
  # @param settings [Qonfig::Settings]
  # @param with_redefinition [Hash] a customizable set of options
  # @return [void]
  # @since 0.1.0
  # @version 0.29.0
  #
  # source://qonfig//lib/qonfig/settings.rb#127
  def __append_settings__(settings, with_redefinition: T.unsafe(nil)); end

  # @api private
  # @param settings_map [Hash]
  # @return [void]
  # @since 0.3.0
  #
  # source://qonfig//lib/qonfig/settings.rb#171
  def __apply_values__(settings_map); end

  # @api private
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#285
  def __clear__; end

  # @api private
  # @option yield_all
  # @param initial_setting_key [String, NilClass]
  # @param block [Proc]
  # @param yield_all [Hash] a customizable set of options
  # @return [Enumerable]
  # @since 0.13.0
  # @yield [key, value]
  # @yieldparam key [String]
  # @yieldparam value [Object]
  #
  # source://qonfig//lib/qonfig/settings.rb#83
  def __deep_each_setting__(initial_setting_key = T.unsafe(nil), yield_all: T.unsafe(nil), &block); end

  # @api private
  # @option with_redefinition
  # @param key [Symbol, String]
  # @param value [Object]
  # @param with_redefinition [Hash] a customizable set of options
  # @return [void]
  # @since 0.1.0
  # @version 0.20.0
  #
  # source://qonfig//lib/qonfig/settings.rb#97
  def __define_setting__(key, value, with_redefinition: T.unsafe(nil)); end

  # @api private
  # @param keys [Array<String, Symbol>]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#180
  def __dig__(*keys); end

  # @api private
  # @param block [Proc]
  # @return [Enumerable]
  # @since 0.13.0
  # @yield [key, value]
  # @yieldparam key [String]
  # @yieldparam value [Object]
  #
  # source://qonfig//lib/qonfig/settings.rb#66
  def __each_setting__(&block); end

  # @api private
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#318
  def __freeze__; end

  # @api private
  # @param key_path [Array<Symbol, String>]
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/settings.rb#350
  def __has_key__(*key_path); end

  # @api private
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#139
  def __invoke_mutation_callbacks__; end

  # @api private
  # @param value [Any]
  # @return [Boolean]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#341
  def __is_a_setting__(value); end

  # @api private
  # @return [Boolean]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#332
  def __is_frozen__; end

  # @api private
  # @option all_variants
  # @param all_variants [Hash] a customizable set of options
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/settings.rb#269
  def __keys__(all_variants: T.unsafe(nil)); end

  # @api private
  # @return [Qonfig::Settings::Callbacks]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#47
  def __mutation_callbacks__; end

  # @api private
  # @return [Hash]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#41
  def __options__; end

  # @api private
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/settings.rb#277
  def __root_keys__; end

  # @api private
  # @param keys [Array<String, Symbol>]
  # @return [Hash]
  # @since 0.9.0
  #
  # source://qonfig//lib/qonfig/settings.rb#199
  def __slice__(*keys); end

  # @api private
  # @param keys [Array<String, Symbol>]
  # @return [Hash, Any]
  # @since 0.10.0
  #
  # source://qonfig//lib/qonfig/settings.rb#208
  def __slice_value__(*keys); end

  # @api private
  # @param keys [Array<String, Symbol, Array<String, Symbol>>]
  # @return [Hash]
  # @since 0.16.0
  #
  # source://qonfig//lib/qonfig/settings.rb#217
  def __subset__(*keys); end

  # @api private
  # @option dot_notation
  # @option transform_key
  # @option transform_value
  # @param dot_notation [Hash] a customizable set of options
  # @param transform_key [Hash] a customizable set of options
  # @param transform_value [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.1.0
  # @version 0.25.0
  #
  # source://qonfig//lib/qonfig/settings.rb#229
  def __to_h__(dot_notation: T.unsafe(nil), transform_key: T.unsafe(nil), transform_value: T.unsafe(nil)); end

  # @api private
  # @option dot_notation
  # @option transform_key
  # @option transform_value
  # @param dot_notation [Hash] a customizable set of options
  # @param transform_key [Hash] a customizable set of options
  # @param transform_value [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.1.0
  # @version 0.25.0
  #
  # source://qonfig//lib/qonfig/settings.rb#229
  def __to_hash__(dot_notation: T.unsafe(nil), transform_key: T.unsafe(nil), transform_value: T.unsafe(nil)); end

  # @api private
  # @param method_name [String, Symbol]
  # @param arguments [Array<Object>]
  # @param block [Proc]
  # @raise [Qonfig::UnknownSettingError]
  # @return [void]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#298
  def method_missing(method_name, *arguments, &block); end

  private

  # @api private
  # @param key [String, Symbol]
  # @param value [Any]
  # @return [void]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/settings.rb#527
  def __assign_value__(key, value); end

  # @api private
  # @option transform_key
  # @option transform_value
  # @param options_part [Hash]
  # @param transform_key [Hash] a customizable set of options
  # @param transform_value [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.25.0
  #
  # source://qonfig//lib/qonfig/settings.rb#716
  def __build_basic_hash_representation__(options_part = T.unsafe(nil), transform_key:, transform_value:); end

  # @api private
  # @option transform_key
  # @option transform_value
  # @param transform_key [Hash] a customizable set of options
  # @param transform_value [Hash] a customizable set of options
  # @return [Hash]
  # @since 0.25.0
  #
  # source://qonfig//lib/qonfig/settings.rb#746
  def __build_dot_notated_hash_representation__(transform_key:, transform_value:); end

  # @api private
  # @raise [Qonfig::FrozenSettingsError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#491
  def __clear_option_values__; end

  # @api private
  # @param keys [Array<Symbol, String>]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::UnknownSettingError]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#589
  def __deep_access__(*keys); end

  # @api private
  # @option yield_all
  # @param initial_setting_key [String, NilClass]
  # @param block [Proc]
  # @param yield_all [Hash] a customizable set of options
  # @return [Enumerator]
  # @since 0.13.0
  # @yield [setting_key, setting_value]
  # @yieldparam setting_key [String]
  # @yieldparam setting_value [Object]
  #
  # source://qonfig//lib/qonfig/settings.rb#436
  def __deep_each_key_value_pair__(initial_setting_key = T.unsafe(nil), yield_all: T.unsafe(nil), &block); end

  # @api private
  # @param keys [Array<Symbol, String>]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::UnknownSettingError]
  # @return [Hash]
  # @since 0.9.0
  #
  # source://qonfig//lib/qonfig/settings.rb#630
  def __deep_slice__(*keys); end

  # @api private
  # @param keys [Array<Symbol, String>]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::UnknownSettingError]
  # @return [Hash]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#660
  def __deep_slice_value__(*keys); end

  # @api private
  # @param keys [Array<String, Symbol, Array<String, Symbol>>]
  # @return [Hash]
  # @since 0.16.0
  #
  # source://qonfig//lib/qonfig/settings.rb#685
  def __deep_subset__(*keys); end

  # @api private
  # @param key [Symbol, String]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#784
  def __define_option_predicate__(key); end

  # @api private
  # @param key [Symbol, String]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#762
  def __define_option_reader__(key); end

  # @api private
  # @param key [Symbol, String]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings.rb#773
  def __define_option_writer__(key); end

  # @api private
  # @param block [Proc]
  # @return [Enumerator]
  # @since 0.13.0
  # @yield [setting_key, setting_value]
  # @yieldparam key [String]
  # @yieldparam value [Object]
  #
  # source://qonfig//lib/qonfig/settings.rb#421
  def __each_key_value_pair__(&block); end

  # @api private
  # @param key [String, Symbol]
  # @raise [Qonfig::UnknownSettingError]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#510
  def __get_value__(key); end

  # @api private
  # @param key [Symbol, String]
  # @raise [Qonfig::ArgumentError]
  # @return [String]
  # @see Qonfig::Settings::KeyGuard
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#798
  def __indifferently_accessable_option_key__(key); end

  # @api private
  # @param key_path [Array<String, Symbol>]
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/settings.rb#396
  def __is_key_exists__(*key_path); end

  # @api private
  # @return [Qonfig::Settings::Lock]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#360
  def __lock__; end

  # @api private
  # @param key [String, Symbol]
  # @return [Array<String>]
  # @since 0.19.0
  #
  # source://qonfig//lib/qonfig/settings.rb#820
  def __parse_dot_notated_key__(key); end

  # @api private
  # @param key [Symbol, String]
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [void]
  # @see Qonfig::Settings::KeyGuard
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#811
  def __prevent_core_method_intersection__(key); end

  # @api private
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/settings.rb#387
  def __root_setting_keys__; end

  # @api private
  # @param key [String, Symbol]
  # @param value [Object]
  # @raise [Qonfig::UnknownSettingError]
  # @raise [Qonfig::FrozenSettingsError]
  # @raise [Qonfig::AmbiguousSettingValueError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings.rb#557
  def __set_value__(key, value); end

  # @api private
  # @param settings_map [Hash]
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::AmbiguousSettingValueError]
  # @return [void]
  # @since 0.3.0
  #
  # source://qonfig//lib/qonfig/settings.rb#462
  def __set_values_from_map__(settings_map); end

  # @api private
  # @option all_variants
  # @param all_variants [Hash] a customizable set of options
  # @return [Array<String>]
  # @since 0.18.0
  #
  # source://qonfig//lib/qonfig/settings.rb#367
  def __setting_keys__(all_variants: T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  # @since 0.1.0
  #
  # source://qonfig//lib/qonfig/settings.rb#308
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# @api private
# @return [Proc]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/settings.rb#17
Qonfig::Settings::BASIC_SETTING_KEY_TRANSFORMER = T.let(T.unsafe(nil), Proc)

# @api private
# @return [Proc]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/settings.rb#23
Qonfig::Settings::BASIC_SETTING_VALUE_TRANSFORMER = T.let(T.unsafe(nil), Proc)

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/settings/builder.rb#5
module Qonfig::Settings::Builder
  class << self
    # @api private
    # @param data_set [Qonfig::DataSet]
    # @param assignements [Block]
    # @return [void]
    # @since 0.21.0
    # @yield [settings, validator]
    # @yieldparam settings [Qonfig::DataSet::Settings]
    # @yieldparam validator [Qonfig::Validation::Validators::Composite]
    #
    # source://qonfig//lib/qonfig/settings/builder.rb#16
    def build(data_set, &assignements); end

    # @api private
    # @param data_set [Qonfig::DataSet]
    # @return [Qonfig::Settings]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/settings/builder.rb#29
    def build_definitions(data_set); end

    # @api private
    # @param data_set [Qonfig::DataSet]
    # @return [void]
    # @since 0.19.0
    #
    # source://qonfig//lib/qonfig/settings/builder.rb#42
    def build_state(data_set); end

    private

    # @api private
    # @param data_set [Qonfig::DataSet]
    # @return [Qonfig::Settings::Callbacks]
    # @since 0.13.0
    #
    # source://qonfig//lib/qonfig/settings/builder.rb#64
    def build_mutation_callbacks(data_set); end

    # @api private
    # @param data_set [Qonfig::DataSet]
    # @return [Qonfig::Validation::Validators::Composite]
    # @since 0.21.0
    #
    # source://qonfig//lib/qonfig/settings/builder.rb#55
    def build_validator(data_set); end
  end
end

# @api private
# @return [Array<String>]
# @since 0.2.0
#
# source://qonfig//lib/qonfig/settings.rb#828
Qonfig::Settings::CORE_METHODS = T.let(T.unsafe(nil), Array)

# @api private
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/callbacks.rb#5
class Qonfig::Settings::Callbacks
  include ::Enumerable

  # @api private
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks.rb#16
  def initialize; end

  # @api private
  # @param callback [Proc, Qonfig::Settings::Callbacks, #call]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks.rb#34
  def add(callback); end

  # @api private
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks.rb#25
  def call; end

  private

  # @api private
  # @return [Array<Proc>]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks.rb#44
  def callbacks; end

  # @api private
  # @return [Any]
  # @since 0.14.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks.rb#50
  def thread_safe(&block); end
end

# @api private
# @since 0.21.0
#
# source://qonfig//lib/qonfig/settings/callbacks/validation.rb#5
class Qonfig::Settings::Callbacks::Validation
  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [void]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks/validation.rb#11
  def initialize(data_set); end

  # @api private
  # @return [void]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks/validation.rb#19
  def call; end

  private

  # @api private
  # @return [Qonfig::DataSet]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/settings/callbacks/validation.rb#29
  def data_set; end
end

# @api private
# @return [String]
# @since 0.19.0
#
# source://qonfig//lib/qonfig/settings.rb#35
Qonfig::Settings::DOT_NOTATION_SEPARATOR = T.let(T.unsafe(nil), String)

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/settings/key_guard.rb#5
class Qonfig::Settings::KeyGuard
  # @api private
  # @param key [String, Symbol, Object]
  # @return [KeyGuard] a new instance of KeyGuard
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/key_guard.rb#30
  def initialize(key); end

  # @api private
  # @return [String, Symbol, Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/key_guard.rb#24
  def key; end

  # @api private
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/key_guard.rb#65
  def prevent_core_method_intersection!; end

  # @api private
  # @raise [Qonfig::ArgumentError]
  # @raise [Qonfig::CoreMethodIntersectionError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/key_guard.rb#41
  def prevent_incomparabilities!; end

  # @api private
  # @raise [Qonfig::ArgumentError]
  # @return [void]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/key_guard.rb#52
  def prevent_incompatible_key_type!; end

  class << self
    # @api private
    # @param key [String, Symbol, Object]
    # @raise [Qonfig::ArgumentError]
    # @raise [Qonfig::CoreMethodIntersectionError]
    # @return [void]
    # @since 0.2.0
    #
    # source://qonfig//lib/qonfig/settings/key_guard.rb#15
    def prevent_incomparabilities!(key); end
  end
end

# @api private
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#5
class Qonfig::Settings::KeyMatcher
  # @api private
  # @param scope_pattern [String, Symbol]
  # @raise [Qonfig::ArgumentError]
  # @return [void]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#55
  def initialize(scope_pattern); end

  # @api private
  # @return [Boolean]
  # @since 0.21.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#68
  def generic?; end

  # @api private
  # @param setting_key_pattern [String]
  # @return [Boolean]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#77
  def match?(setting_key_pattern); end

  # @api private
  # @return [String]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#46
  def scope_pattern; end

  private

  # @api private
  # @param scope_pattern [String]
  # @return [Regexp]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#164
  def build_pattern_matcher(scope_pattern); end

  # @api private
  # @param setting_key_pattern [String]
  # @return [Boolean]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#124
  def comparable_event_scopes?(setting_key_pattern); end

  # @api private
  # @param scope_pattern [String]
  # @return [Integer, Float::INFINITY]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#101
  def count_scope_pattern_size(scope_pattern); end

  # @api private
  # @param setting_key_pattern [String]
  # @return [Integer]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#115
  def count_setting_key_pattern_size(setting_key_pattern); end

  # @api private
  # @param pattern [String, NilClass]
  # @return [Boolean]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#136
  def non_generic_pattern?(pattern = T.unsafe(nil)); end

  # @api private
  # @return [Regexp]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#88
  def pattern_matcher; end

  # @api private
  # @return [Integer, Float::INFINITY]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#94
  def scope_pattern_size; end

  # "\.test\.created\.today\." => "test\.created\.today"
  #
  #
  # @api private
  # @option left
  # @option right
  # @param regexp_string [String]
  # @param left [Hash] a customizable set of options
  # @param right [Hash] a customizable set of options
  # @return [String]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/settings/key_matcher.rb#151
  def strip_regexp_string(regexp_string, left: T.unsafe(nil), right: T.unsafe(nil)); end
end

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#22
Qonfig::Settings::KeyMatcher::GENERIC_PART_PATTERN = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#28
Qonfig::Settings::KeyMatcher::GENERIC_REGEXP_PATTERN = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#34
Qonfig::Settings::KeyMatcher::INFINITE_PART_PATTERN = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#40
Qonfig::Settings::KeyMatcher::INFINITE_REGEXP_PATTERN = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#16
Qonfig::Settings::KeyMatcher::MATCHER_SCOPE_SPLITTER = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.13.0
#
# source://qonfig//lib/qonfig/settings/key_matcher.rb#10
Qonfig::Settings::KeyMatcher::SCOPE_SPLITTER = T.let(T.unsafe(nil), String)

# @api private
# @since 0.2.0
#
# source://qonfig//lib/qonfig/settings/lock.rb#5
class Qonfig::Settings::Lock
  # @api private
  # @return [Lock] a new instance of Lock
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#8
  def initialize; end

  # @api private
  # @param instructions [Proc]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#28
  def thread_safe_access(&instructions); end

  # @api private
  # @param instructions [Proc]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#19
  def thread_safe_definition(&instructions); end

  # @api private
  # @param instructions [Proc]
  # @return [Object]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#37
  def thread_safe_merge(&instructions); end

  private

  # @api private
  # @return [Mutex]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#53
  def access_lock; end

  # @api private
  # @return [Mutex]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#47
  def definition_lock; end

  # @api private
  # @return [Mutex]
  # @since 0.2.0
  #
  # source://qonfig//lib/qonfig/settings/lock.rb#59
  def merge_lock; end
end

# @api private
# @return [Boolean]
# @since 0.25.0
#
# source://qonfig//lib/qonfig/settings.rb#29
Qonfig::Settings::REPRESENT_HASH_IN_DOT_STYLE = T.let(T.unsafe(nil), FalseClass)

# @api private
# @see Qonfig::Settings
# @since 0.19.0
#
# source://qonfig//lib/qonfig/errors.rb#59
class Qonfig::StrangeThingsError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Settings
# @since 0.1.0
#
# source://qonfig//lib/qonfig/errors.rb#53
class Qonfig::UnknownSettingError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Plugins::Registry
# @since 0.4.0
#
# source://qonfig//lib/qonfig/errors.rb#165
class Qonfig::UnregisteredPluginError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Plugin::TOMLFormat
# @since 0.12.0
#
# source://qonfig//lib/qonfig/errors.rb#183
class Qonfig::UnresolvedPluginDependencyError < ::Qonfig::PluginError; end

# @api public
# @see Qonfig::Loaders
# @since 0.15.0
#
# source://qonfig//lib/qonfig/errors.rb#177
class Qonfig::UnsupportedLoaderFormatError < ::Qonfig::Error; end

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders.rb#5
module Qonfig::Uploaders; end

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/base.rb#6
class Qonfig::Uploaders::Base
  class << self
    # @api private
    # @param settings [Qonfig::Settings]
    # @param options [Hash<Symbol,Any>]
    # @param value_procssor [Block]
    # @return [void]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/base.rb#15
    def upload(settings, options: T.unsafe(nil), &value_processor); end
  end
end

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/file.rb#5
class Qonfig::Uploaders::File < ::Qonfig::Uploaders::Base
  class << self
    # @api private
    # @option path
    # @option options
    # @param settings [Qonfig::Settings]
    # @param value_processor [Block]
    # @param path [Hash] a customizable set of options
    # @param options [Hash] a customizable set of options
    # @return [void]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/file.rb#33
    def upload(settings, path:, options: T.unsafe(nil), &value_processor); end

    private

    # @api private
    # @param settings [Qonfig::Settings]
    # @param options [Hash<Symbol|String,Any>]
    # @param value_processor [Block]
    # @return [String]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/file.rb#49
    def represent_settings(settings, options, &value_processor); end
  end
end

# @api private
# @return [Hash]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/file.rb#22
Qonfig::Uploaders::File::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
# @return [String]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/file.rb#16
Qonfig::Uploaders::File::EMPTY_SETTINGS_REPRESENTATION = T.let(T.unsafe(nil), String)

# @api private
# @return [String]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/file.rb#10
Qonfig::Uploaders::File::FILE_OPENING_MODE = T.let(T.unsafe(nil), String)

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/json.rb#5
class Qonfig::Uploaders::JSON < ::Qonfig::Uploaders::File
  class << self
    # @api private
    # @param settings [Qonfig::Settings]
    # @param options [Hash<Symbol,Any>]
    # @param value_processor [Block]
    # @return [String]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/json.rb#24
    def represent_settings(settings, options, &value_processor); end
  end
end

# @api private
# @return [Hash<Symbol,Any>]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/json.rb#10
Qonfig::Uploaders::JSON::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/yaml.rb#5
class Qonfig::Uploaders::YAML < ::Qonfig::Uploaders::File
  class << self
    # @api private
    # @param options [Hash<Symbol|String,Any>]
    # @param value_processor [Block]
    # @return [Hash]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/yaml.rb#60
    def hash_representation_options(options, &value_processor); end

    # @api private
    # @param settings [Qonfig::Settings]
    # @param options [Hash<Symbol,Any>]
    # @param value_processor [Block]
    # @return [String]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/yaml.rb#48
    def represent_settings(settings, options, &value_processor); end

    # @api private
    # @param settings_hash [Hash<String|Symbol,Any>]
    # @param yaml_options [Hash<Symbol,Any>]
    # @return [String]
    # @since 0.11.0
    #
    # source://qonfig//lib/qonfig/uploaders/yaml.rb#89
    def to_yaml_string(settings_hash, yaml_options); end
  end
end

# @api private
# @return [Hash<Symbol,Any>]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/yaml.rb#26
Qonfig::Uploaders::YAML::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
# @return [Proc]
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/yaml.rb#38
Qonfig::Uploaders::YAML::KEY_SYMBOLIZER = T.let(T.unsafe(nil), Proc)

# @api private
# @since 0.11.0
#
# source://qonfig//lib/qonfig/uploaders/yaml.rb#8
class Qonfig::Uploaders::YAML::YAMLRepresenter < ::Psych::Visitors::YAMLTree
  # Needed for using the '~' symbol used for null value representation in YAML files
  # (instead of space symbol (' ')) (see psych/lib/psych/visitors/yaml_tree.rb)
  #
  # @api private
  # @param object [Any]
  # @return [Any]
  # @since 0.11.0
  #
  # source://qonfig//lib/qonfig/uploaders/yaml.rb#17
  def visit_NilClass(object); end
end

# @api private
# @since 0.19.0
#
# source://qonfig//lib/qonfig/validation.rb#5
module Qonfig::Validation; end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building.rb#5
module Qonfig::Validation::Building; end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#5
class Qonfig::Validation::Building::InstanceBuilder
  # @api private
  # @param data_set_klass [Class<Qonfig::DataSet>]
  # @param setting_key_pattern [String, Symbol, NilClass]
  # @param predefined_validator_name [String, Symbol, NilClass]
  # @param runtime_validation_method [String, Symbol, NilClass]
  # @param strict [Boolean]
  # @param validation_logic [Proc, NilClass]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#78
  def initialize(data_set_klass, setting_key_pattern, predefined_validator_name, runtime_validation_method, strict, validation_logic); end

  # @api private
  # @return [Qonfig::Validation::Validators::MethodBased]
  # @return [Qonfig::Validation::Validators::ProcBased]
  # @return [Qonfig::Validation::Validators::Predefined]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#100
  def build; end

  private

  # @api private
  # @return [Qonfig::Validation::Validators::MethodBased]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#185
  def build_method_based_validator; end

  # @api private
  # @return [Qonfig::Validation::Validators::Predefined]
  # @see Qonfig::Validation::Collections::PredefinedRegistry
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#207
  def build_predefined_validator; end

  # @api private
  # @return [Qonfig::Validation::Validators::ProcBased]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#195
  def build_proc_based_validator; end

  # @api private
  # @return [Qonfig::Settings::KeyMatcher, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#177
  def build_setting_key_matcher; end

  # @api private
  # @return [Qonfig::Validation::Validators::MethodBased]
  # @return [Qonfig::Validation::Validators::ProcBased]
  # @return [Qonfig::Validation::Validators::Predefined]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#165
  def build_validator; end

  # @api private
  # @return [Class<Qonfig::DataSet>]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#111
  def data_set_klass; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#123
  def predefined_validator_name; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#129
  def runtime_validation_method; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#117
  def setting_key_pattern; end

  # @api private
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#135
  def strict; end

  # @api private
  # @raise [Qonfig::ArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#149
  def validate_attributes!; end

  # @api private
  # @return [Proc, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#141
  def validation_logic; end

  class << self
    # @api private
    # @option setting_key_pattern
    # @option predefined_validator
    # @option runtime_validation_method
    # @option validation_logic
    # @option strict
    # @param data_set_klass [Class<Qonfig::DataSet>]
    # @param setting_key_pattern [Hash] a customizable set of options
    # @param predefined_validator [Hash] a customizable set of options
    # @param runtime_validation_method [Hash] a customizable set of options
    # @param validation_logic [Hash] a customizable set of options
    # @param strict [Hash] a customizable set of options
    # @return [Qonfig::Validator::MethodBased, Qonfig::Validator::ProcBased]
    # @since 0.20.0
    #
    # source://qonfig//lib/qonfig/validation/building/instance_builder.rb#49
    def build(data_set_klass, setting_key_pattern: T.unsafe(nil), runtime_validation_method: T.unsafe(nil), validation_logic: T.unsafe(nil), strict: T.unsafe(nil), predefined_validator: T.unsafe(nil)); end
  end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#6
class Qonfig::Validation::Building::InstanceBuilder::AttributesConsistency
  # @api private
  # @param setting_key_pattern [String, Symbol, NilClass]
  # @param predefined_validator [String, Symbol, NilClass]
  # @param runtime_validation_method [String, Symbol, NilClass]
  # @param validation_logic [Proc, NilClass]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#42
  def initialize(setting_key_pattern, predefined_validator, runtime_validation_method, strict, validation_logic); end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#62
  def check!; end

  private

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#109
  def consistent_method_choice!; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#147
  def consistent_predefined_validator!; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#199
  def consistent_setting_key_pattern!; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#132
  def consistent_strict_behaviour!; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#181
  def consistent_validation_logic!; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#164
  def cosnistent_runtime_validation_method!; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#83
  def predefined_validator; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#89
  def runtime_validation_method; end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#77
  def setting_key_pattern; end

  # @api private
  # @return [Boolean]
  # @since 0.17.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#95
  def strict; end

  # @api private
  # @return [Proc, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#101
  def validation_logic; end

  class << self
    # @api private
    # @param setting_key_pattern [String, Symbol, NilClass]
    # @param predefined_validator [String, Symbol, NilClass]
    # @param runtime_validation_method [String, Symbol, NilClass]
    # @param strict [Boolean]
    # @param validation_logic [Proc, NilClass]
    # @return [void]
    # @since 0.20.0
    #
    # source://qonfig//lib/qonfig/validation/building/instance_builder/attribute_consistency.rb#17
    def check!(setting_key_pattern, predefined_validator, runtime_validation_method, strict, validation_logic); end
  end
end

# @api private
# @return [Boolean]
# @since 0.17.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#36
Qonfig::Validation::Building::InstanceBuilder::DEFAULT_STRICT_BEHAVIOUR = T.let(T.unsafe(nil), FalseClass)

# @api private
# @return [NilClass]
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#12
Qonfig::Validation::Building::InstanceBuilder::EMPTY_SETTING_KEY_PATTERN = T.let(T.unsafe(nil), T.untyped)

# @api private
# @return [NilClass]
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#30
Qonfig::Validation::Building::InstanceBuilder::NO_PREDEFINED_VALIDATOR = T.let(T.unsafe(nil), T.untyped)

# @api private
# @return [NilClass]
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#18
Qonfig::Validation::Building::InstanceBuilder::NO_RUNTIME_VALIDATION_METHOD = T.let(T.unsafe(nil), T.untyped)

# @api private
# @return [NilClass]
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/instance_builder.rb#24
Qonfig::Validation::Building::InstanceBuilder::NO_VALIDATION_LOGIC = T.let(T.unsafe(nil), T.untyped)

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#5
class Qonfig::Validation::Building::PredefinedBuilder
  # @api private
  # @param name [String, Symbol]
  # @param validation_logic [Proc]
  # @param predefined_registry [Qonfig::Validation::Collections::PredefinedRegistry]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#26
  def initialize(name, validation_logic, predefined_registry); end

  # @api private
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#36
  def build; end

  private

  # @api private
  # @return [String]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#73
  def name; end

  # @api private
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#65
  def predefine_validator; end

  # @api private
  # @return [Qonfig::Validation::Collections::PredefinedRegistry]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#85
  def predefined_registry; end

  # @api private
  # @raise [Qonfig::ValidatorArgumentError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#49
  def validate_attributes!; end

  # @api private
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#79
  def validation_logic; end

  class << self
    # @api private
    # @param name [String, Symbol]
    # @param validation_logic [Proc]
    # @param predefined_registry [Qonfig::Validation::Collections::PredefinedRegistry]
    # @return [void]
    # @since 0.20.0
    #
    # source://qonfig//lib/qonfig/validation/building/predefined_builder.rb#14
    def build(name, validation_logic, predefined_registry); end
  end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/collections.rb#5
module Qonfig::Validation::Collections; end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#5
class Qonfig::Validation::Collections::InstanceCollection
  include ::Enumerable

  # @api private
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#20
  def initialize; end

  # @api private
  # @param validator [Qonfig::Validation::Validators::Base]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#30
  def <<(validator); end

  # @api private
  # @param validator [Qonfig::Validation::Validators::Base]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#30
  def add_validator(validator); end

  # @api private
  # @param collection [Qonfig::Validation::Collections::InstanceCollection]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#49
  def concat(collection); end

  # @api private
  # @return [Qonfig::Validation::Collections::InstanceCollection]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#57
  def dup; end

  # @api private
  # @param block [Proc]
  # @return [Enumerable]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#40
  def each(&block); end

  # @api private
  # @return [Array<Qonfig::Validation::Validators::Base>]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#14
  def validators; end

  private

  # @api private
  # @param block [Proc]
  # @return [Any]
  # @since 0.13.0
  #
  # source://qonfig//lib/qonfig/validation/collections/instance_collection.rb#72
  def thread_safe(&block); end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#5
class Qonfig::Validation::Collections::PredefinedRegistry
  include ::Enumerable

  # @api private
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#13
  def initialize; end

  # @api private
  # @param name [String, Symbol]
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#43
  def [](name); end

  # @api private
  # @param name [String, Symbol]
  # @param validation [Proc]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#33
  def []=(name, validation); end

  # @api private
  # @return [Qonfig::Validation::Collection::PredefinedRegistry]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#52
  def dup; end

  # @api private
  # @param block [Block]
  # @return [Enumerable]
  # @since 0.20.0
  # @yield [validator_name, validation_logic]
  # @yieldparam validator_name [String]
  # @yieldparam validation_logic [Proc]
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#64
  def each(&block); end

  # @api private
  # @param predefined_registry [Qonfig::Validation::Collections::PredefinedRegistry]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#23
  def merge(predefined_registry); end

  # @api private
  # @param name [String, Symbol]
  # @param validation [Proc]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#33
  def register(name, validation); end

  # @api private
  # @param name [String, Symbol]
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#43
  def resolve(name); end

  private

  # @api private
  # @param name [String, Symbol]
  # @param validation [Proc]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#93
  def apply(name, validation); end

  # @api private
  # @param predefined_registry [Qonfig::Validation::Collections::PredefinedRegistry]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#119
  def concat(predefined_registry); end

  # @api private
  # @return [Qonfig::Validation::Collections::PredefinedRegistry]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#129
  def duplicate; end

  # @api private
  # @param name [String, Symbol]
  # @raise [Qonfig::ValidatorNotFoundError]
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#105
  def fetch(name); end

  # @api private
  # @param name [String, Symbol]
  # @return [String]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#83
  def indifferently_accessable_name(name); end

  # @api private
  # @param block [Proc]
  # @return [Any]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#142
  def thread_safe(&block); end

  # @api private
  # @return [Hash<String,Proc>]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/collections/predefined_registry.rb#76
  def validators; end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/predefinition_mixin.rb#5
module Qonfig::Validation::PredefinitionMixin
  # @api private
  # @param name [String, Symbol]
  # @param validation_logic [Block]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/predefinition_mixin.rb#12
  def define_validator(name, &validation_logic); end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators.rb#5
module Qonfig::Validation::Validators; end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators/basic.rb#5
class Qonfig::Validation::Validators::Basic
  # @api private
  # @param setting_key_matcher [Qonfig::Settings::KeyMatcher, NilClass]
  # @param strict [Boolean]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#24
  def initialize(setting_key_matcher, strict); end

  # @api private
  # @return [String, Symbol, NilClass]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#10
  def setting_key_matcher; end

  # @api private
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#16
  def strict; end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#34
  def validate(data_set); end

  private

  # @api private
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#44
  def setting_key_provided?; end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [Any]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#60
  def validate_concrete(data_set); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [Any]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/basic.rb#53
  def validate_full(data_set); end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators/composite.rb#5
class Qonfig::Validation::Validators::Composite
  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/composite.rb#11
  def initialize(data_set); end

  # @api private
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/composite.rb#30
  def valid?; end

  # @api private
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/composite.rb#20
  def validate!; end

  private

  # @api private
  # @return [Qonfig::DataSet]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/composite.rb#43
  def data_set; end

  # @api private
  # @return [Qonfig::Validation::Collections::InstanceCollection]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/composite.rb#49
  def validators; end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators/method_based.rb#5
class Qonfig::Validation::Validators::MethodBased < ::Qonfig::Validation::Validators::Basic
  # @api private
  # @param setting_key_matcher [Qonfig::Settings::KeyMatcher, NilClass]
  # @param strict [Boolean]
  # @param runtime_validation_method [String, Symbol]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/method_based.rb#19
  def initialize(setting_key_matcher, strict, runtime_validation_method); end

  # @api private
  # @return [Symbol, String]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/method_based.rb#10
  def runtime_validation_method; end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/method_based.rb#29
  def validate_concrete(data_set); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/method_based.rb#46
  def validate_full(data_set); end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators/predefined.rb#5
class Qonfig::Validation::Validators::Predefined < ::Qonfig::Validation::Validators::Basic
  # @api private
  # @param setting_key_matcher [Qonfig::Settings::KeyMatcher]
  # @param strict [Boolean]
  # @param validation [Proc]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/predefined.rb#19
  def initialize(setting_key_matcher, strict, validation); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @raise [Qonfig::ValidationError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/predefined.rb#31
  def validate_concrete(data_set); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @raise [Qonfig::ValidationError]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/predefined.rb#50
  def validate_full(data_set); end

  # @api private
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/predefined.rb#10
  def validation; end
end

# @api private
# @since 0.20.0
#
# source://qonfig//lib/qonfig/validation/validators/proc_based.rb#5
class Qonfig::Validation::Validators::ProcBased < ::Qonfig::Validation::Validators::Basic
  # @api private
  # @param setting_key_matcher [Qonfig::Settings::KeyMatcher, NilClass]
  # @param strict [Boolean]
  # @param vaidation [Proc]
  # @return [void]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/proc_based.rb#19
  def initialize(setting_key_matcher, strict, validation); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @raise [Qonfig::ValidationError]
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/proc_based.rb#31
  def validate_concrete(data_set); end

  # @api private
  # @param data_set [Qonfig::DataSet]
  # @raise [Qonfig::ValidationError]
  # @return [Boolean]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/proc_based.rb#50
  def validate_full(data_set); end

  # @api private
  # @return [Proc]
  # @since 0.20.0
  #
  # source://qonfig//lib/qonfig/validation/validators/proc_based.rb#10
  def validation; end
end

# @api public
# @see Qonfig::Validation::Validators::MethodBased
# @see Qonfig::Validation::Validators::ProcBased
# @see Qonfig::Validation::Validators::Predefined
# @since 0.13.0
#
# source://qonfig//lib/qonfig/errors.rb#18
class Qonfig::ValidationError < ::Qonfig::Error; end

# @api public
# @see Qonfig::Validation::Building::InstanceBuilder::AttributeConsistency
# @see Qonfig::Validation::Building::PredefinedBuilder
# @since 0.13.0
#
# source://qonfig//lib/qonfig/errors.rb#25
class Qonfig::ValidatorArgumentError < ::Qonfig::ArgumentError; end

# @api public
# @see Qonfig::Validation::Collections::PredefinedRegistry
# @since 0.20.0
#
# source://qonfig//lib/qonfig/errors.rb#31
class Qonfig::ValidatorNotFoundError < ::Qonfig::ValidatorArgumentError; end

# @api public
# @see Qonfig::Loaders::YAML
# @see Qonfig::Loaders::Dynamic
# @since 0.17.0
#
# source://qonfig//lib/qonfig/errors.rb#147
class Qonfig::YAMLLoaderParseError < ::Psych::SyntaxError; end
